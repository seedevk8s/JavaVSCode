sequenceDiagram
    participant U as 👤 User
    participant M as 🚀 Main
    participant S as ⚙️ VehicleService
    participant V as 🚗 Vehicle (Abstract)
    participant MV as 🔧 ManualVehicle
    participant AV as 🤖 AutonomousVehicle
    participant F as 🏭 VehicleFactory
    participant D as 🖥️ DisplayUtils
    
    Note over U,D: 🎬 차량 등록 및 운행 시나리오
    
    %% 1. 차량 등록 프로세스
    rect rgb(240, 248, 255)
        Note over U,D: 📝 1. 차량 등록 프로세스
        U->>M: 메뉴 선택: "1. 차량 등록"
        M->>U: 차량 이름 입력 요청
        U->>M: "테슬라-모델S"
        M->>U: 차량 타입 선택 요청
        U->>M: "2. 자율주행차량"
        
        M->>F: createVehicle(AUTONOMOUS, "테슬라-모델S")
        F->>AV: new AutonomousVehicle("테슬라-모델S")
        AV-->>F: AutonomousVehicle 인스턴스
        F-->>M: Vehicle 객체 반환
        
        M->>S: registerVehicle(vehicle)
        S->>S: 중복 검사 및 유효성 검증
        S->>S: vehicleRepository에 저장
        S->>S: clearStatisticsCache()
        S-->>M: vehicleId 반환
        
        M->>D: 등록 완료 메시지 출력
        D-->>U: "✅ 차량이 성공적으로 등록되었습니다!"
    end
    
    %% 2. 차량 운행 프로세스 (자율주행차)
    rect rgb(248, 255, 248)
        Note over U,D: 🚗 2. 자율주행차 운행 프로세스
        U->>M: 메뉴 선택: "3. 차량 개별 운행"
        M->>S: getAllVehicles()
        S-->>M: 등록된 차량 목록
        M->>D: displayVehicleList()
        D-->>U: 차량 목록 출력
        
        U->>M: 차량 선택: "1"
        U->>M: 운행 거리: "50.5km"
        
        M->>S: operateVehicle(vehicleId, 50.5)
        S->>S: getVehicleById(vehicleId)
        S->>V: startEngine()
        V->>AV: startEngine() [다형성]
        
        AV->>AV: 상태 검증 (canStart())
        AV->>AV: 배터리 검증 (>20%)
        AV->>AV: changeStatus(STARTING)
        AV->>AV: activateSensors()
        AV->>AV: connectToGPS()
        AV->>AV: changeStatus(STOPPED)
        
        S->>V: drive(50.5)
        V->>AV: drive(50.5) [다형성]
        
        AV->>AV: 입력값 검증 (distance > 0)
        AV->>AV: 시스템 상태 검증
        AV->>AV: 배터리 소모량 계산
        AV->>AV: changeStatus(RUNNING)
        AV->>AV: simulateAutonomousDriving(50.5)
        AV->>AV: addMileage(50.5)
        
        S->>V: stop()
        V->>AV: stop() [다형성]
        AV->>AV: changeStatus(STOPPED)
        
        S->>S: 운행 이력 기록 (DriveHistory)
        S->>S: clearStatisticsCache()
        S-->>M: 운행 완료
        
        M->>D: 운행 완료 메시지 출력
        D-->>U: "✅ 운행이 성공적으로 완료되었습니다!"
    end
    
    %% 3. 수동차 운행 프로세스 (차이점 강조)
    rect rgb(255, 248, 240)
        Note over U,D: 🔧 3. 수동차 운행 프로세스 (비교)
        Note over MV: 수동차는 다른 방식으로 동작
        
        alt 수동차 운행 시
            S->>V: startEngine()
            V->>MV: startEngine() [다형성]
            MV->>MV: 연료 검증 (>5L)
            MV->>MV: 키 시동 시뮬레이션
            MV->>MV: 엔진 온도 상승
            
            S->>V: drive(distance)
            V->>MV: drive(distance) [다형성]
            MV->>MV: 연료 소모량 계산
            MV->>MV: simulateDriving() [사람이 조작]
            MV->>MV: 연료 소모 및 주행거리 추가
        end
    end
    
    %% 4. 정비 프로세스
    rect rgb(255, 240, 245)
        Note over U,D: 🔧 4. 차량 정비 프로세스
        U->>M: 메뉴 선택: "5. 차량 정비"
        M->>S: performMaintenance(vehicleId)
        S->>V: performMaintenance()
        
        alt 자율주행차 정비
            V->>AV: performMaintenance() [다형성]
            AV->>AV: changeStatus(MAINTENANCE)
            AV->>AV: AI 시스템 업데이트
            AV->>AV: 센서 칼리브레이션
            AV->>AV: 배터리 충전 (100%)
            AV->>AV: updateMaintenanceDate()
            AV->>AV: changeStatus(PARKED)
            AV-->>S: 정비 완료 메시지
        else 수동차 정비
            V->>MV: performMaintenance() [다형성]
            MV->>MV: changeStatus(MAINTENANCE)
            MV->>MV: 엔진 오일 교환
            MV->>MV: 브레이크 점검
            MV->>MV: 연료 보충 (60L)
            MV->>MV: updateMaintenanceDate()
            MV->>MV: changeStatus(PARKED)
            MV-->>S: 정비 완료 메시지
        end
        
        S-->>M: 정비 결과 반환
        M->>D: 정비 완료 메시지 출력
        D-->>U: "🔧 정비가 완료되었습니다!"
    end
    
    %% 5. 통계 조회 프로세스
    rect rgb(248, 248, 255)
        Note over U,D: 📊 5. 통계 조회 프로세스
        U->>M: 메뉴 선택: "6. 시스템 통계 조회"
        M->>S: getSystemStatistics()
        
        alt 캐시된 통계가 있고 최신인 경우
            S->>S: statisticsCache 확인
            S->>S: cached.isRecent() 검증
            S-->>M: 캐시된 SystemStatistics 반환
        else 캐시 미스 또는 만료된 경우
            S->>S: 실시간 통계 계산
            S->>S: vehicleRepository에서 데이터 수집
            S->>S: driveHistoryList에서 이력 분석
            S->>S: Stream API로 그룹핑/집계
            S->>S: SystemStatistics 생성
            S->>S: statisticsCache에 저장 (5분 TTL)
            S-->>M: 새로운 SystemStatistics 반환
        end
        
        M->>D: displaySystemStatistics(statistics)
        D-->>U: 📊 시스템 통계 정보 출력
    end
    
    Note over U,D: 🎯 핵심 설계 포인트
    Note over V: 추상클래스를 통한 다형성 구현
    Note over S: 비즈니스 로직의 중앙화
    Note over F: Factory Pattern으로 객체 생성 캡슐화
    Note over D: 관심사 분리 (출력 로직 분리)